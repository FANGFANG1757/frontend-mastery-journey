name: 🤖 Claude Code Review Automation

on:
  pull_request:
    types: [opened, synchronize, ready_for_review]
    branches: [ main ]
    paths: 
      - 'weeks/**'
      - 'projects/**'

jobs:
  claude-review-trigger:
    name: 🎯 Trigger Claude Code Review
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 📊 Analyze changes
        id: analyze
        run: |
          echo "Analyzing PR changes for Claude Code review..."
          
          # Get list of changed files
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Detect week or project type
          if echo "$CHANGED_FILES" | grep -q "weeks/week-[0-9]"; then
            WEEK_NUM=$(echo "$CHANGED_FILES" | grep -o "week-[0-9][0-9]" | head -1 | grep -o "[0-9][0-9]")
            echo "review_type=week" >> $GITHUB_OUTPUT
            echo "week_number=$WEEK_NUM" >> $GITHUB_OUTPUT
          elif echo "$CHANGED_FILES" | grep -q "projects/"; then
            PROJECT_NAME=$(echo "$CHANGED_FILES" | grep "projects/" | cut -d'/' -f2 | head -1)
            echo "review_type=project" >> $GITHUB_OUTPUT
            echo "project_name=$PROJECT_NAME" >> $GITHUB_OUTPUT
          fi
          
          # Count TODO comments
          TODO_COUNT=0
          for file in $CHANGED_FILES; do
            if [[ -f "$file" && ("$file" == *.html || "$file" == *.js || "$file" == *.ts || "$file" == *.jsx || "$file" == *.tsx || "$file" == *.css) ]]; then
              TODO_COUNT=$((TODO_COUNT + $(grep -c "TODO" "$file" 2>/dev/null || echo 0)))
            fi
          done
          echo "todo_count=$TODO_COUNT" >> $GITHUB_OUTPUT

      - name: 🎯 Create Claude Code review request
        uses: actions/github-script@v7
        with:
          script: |
            const { analyze } = process.env;
            
            // Create a comment that will trigger Claude Code review
            const reviewRequest = `## 🤖 Claude Code Review Request
            
            **Review Type**: ${{ steps.analyze.outputs.review_type }}
            **Week/Project**: ${{ steps.analyze.outputs.week_number }}${{ steps.analyze.outputs.project_name }}
            **Changed Files**: ${{ steps.analyze.outputs.changed_files }}
            **Remaining TODOs**: ${{ steps.analyze.outputs.todo_count }}
            
            ### 📋 Review Checklist for Claude Code
            
            Please review this PR for:
            
            #### 🎯 Week Completion Criteria
            - [ ] All learning objectives demonstrated
            - [ ] TODO comments resolved with proper implementations
            - [ ] Code quality meets professional standards
            - [ ] Accessibility requirements fulfilled (Lighthouse ≥90)
            
            #### 🔧 Technical Quality
            - [ ] Semantic HTML structure appropriate
            - [ ] CSS follows best practices (mobile-first, performance)
            - [ ] JavaScript/TypeScript is clean and functional
            - [ ] Testing coverage adequate for week objectives
            
            #### 📚 Learning Progression
            - [ ] Student demonstrates mastery of week concepts
            - [ ] Documentation and learning logs updated
            - [ ] Ready to progress to next week's challenges
            
            #### 🚀 Professional Development
            - [ ] Git workflow and commit quality appropriate
            - [ ] Project deployed and accessible
            - [ ] README and case study documentation complete
            
            ### 🎓 Week Advancement Decision
            
            Based on your review, please indicate:
            
            - **✅ APPROVED - Ready for Next Week**: All criteria met, excellent progression
            - **🔄 CHANGES REQUESTED**: Minor improvements needed before advancement  
            - **❌ MAJOR REVISIONS**: Significant issues must be addressed
            
            ---
            
            @claude-code Please review this PR for Week ${{ steps.analyze.outputs.week_number }} completion and advise on readiness for advancement.
            `;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: reviewRequest
            });

      - name: 📊 Generate review summary
        run: |
          echo "🎯 Claude Code Review Summary" >> $GITHUB_STEP_SUMMARY
          echo "=============================" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**PR**: #${{ github.event.pull_request.number }} - ${{ github.event.pull_request.title }}" >> $GITHUB_STEP_SUMMARY
          echo "**Type**: ${{ steps.analyze.outputs.review_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Remaining TODOs**: ${{ steps.analyze.outputs.todo_count }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📁 Files Changed:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.analyze.outputs.changed_files }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ⏳ Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Claude Code will review the PR" >> $GITHUB_STEP_SUMMARY
          echo "2. Address any feedback provided" >> $GITHUB_STEP_SUMMARY
          echo "3. Get approval for week advancement" >> $GITHUB_STEP_SUMMARY
          echo "4. Merge and update progress tracking" >> $GITHUB_STEP_SUMMARY

  quality-gate:
    name: 📋 Pre-Review Quality Gate
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚨 Check for critical issues
        run: |
          echo "🔍 Running pre-review quality checks..."
          
          # Check if PROGRESS.md was updated
          if ! git diff --name-only HEAD~1 HEAD | grep -q "PROGRESS.md"; then
            echo "❌ PROGRESS.md not updated - this is required for week completion"
            exit 1
          fi
          
          # Check for excessive TODO comments (should be minimal for review)
          TODO_COUNT=$(find . -type f \( -name "*.html" -o -name "*.js" -o -name "*.ts" -o -name "*.css" \) -exec grep -l "TODO" {} \; | wc -l)
          if [ $TODO_COUNT -gt 5 ]; then
            echo "⚠️  Warning: $TODO_COUNT files still contain TODO comments"
            echo "💡 Consider resolving most TODOs before requesting review"
          fi
          
          echo "✅ Pre-review quality gate passed"